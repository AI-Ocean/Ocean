========
시작하기
========

Ocean은 GPU Cluster Management System입니다.

------
특징
------

Ocean은 여러대의 GPU 서버를 효율적으로 사용하기위해 클러스터를 구성합니다.
- Ocean은 ocean-agent를 ``pip`` 에서 다운받아 단 몇번의 명령어 입력으로 쉽게 클러스터를 구성할 수 있습니다.

- 사용자는 쉽게 구성된 원격 개발환경에서 언제 어디서나 접속이 가능합니다.
- 사용자는 기본적으로 공유 저장소를 사용하여 어느 위치의 GPU서버에서나 같은 환경을 유지하여 서버를 이동하면서 새로운 환경을 설정할 필요가 없습니다.
- 사용자는 GPU작업을 Web/CLI로 쉽게 제출할 수 있으며, 기본적으로 GPU자원은 모든 사용자에게 공유되기 때문에 효율적으로 GPU서버가 운영됩니다.

- 관리자는 사용자가 사용가능한 GPU, CPU, Memory를 미리 지정한 머신타입을 설정하여 관리가 가능합니다.
- 관리자는 개발환경을 Docker Image로 설정할 수 있고, 사용자는 이 이미지를 이용해 한번에 환경설정이 가능합니다. 
- 관리자는 사용자관리, 할당량관리, 클러스터 모니터링, GPU 모니터링, 관리 팁 등을 통해 손쉽게 관리가 가능합니다. 

-------
개요
-------

Ocean은 사용자가 실질적으로 사용하는 세가지 Workload를 제공합니다.

==========  =====================
Workload    설명
----------  ---------------------
Instance    원격 개발환경
Volume      개인 저장소
Job         GPU 작업 실행단위
==========  =====================

추가적으로 사용되는 용어는 다음과 같습니다.

============  ========================================
용어          설명
------------  ----------------------------------------
MachineType   미리 정의된 CPU, Memory, GPU set
Quota         동시에 사용가능한 MachineType 갯수
QuotaRequest  MachineType을 사용하기 위해 요청하는 것
============  ========================================


Instance
---------

Instance는 개인용 원격 개발환경으로 언제어디서나 접속이 가능한 개인용 개발환경입니다.
이곳에서는 코드작성, 환경 설정등의 작업을 하며 SSH 및 VSCode 웹 에디터 접속을 제공합니다.


Volume
--------

Volume은 개인용 저장소로 Instance와 Job에서 사용됩니다.
기본 사용자인 linuxbrew의 홈디렉토리(/home/linuxbrew)에 마운트되며 이곳에서 작업하는 모든 설정은 영구적으로 저장됩니다.
PIP, HomeBrew를 통해 설치된 패키지들은 여기에 저장되며 볼륨이 마운트된 모든 환경에서 공유됩니다.

주의!
    linuxbrew의 홈디렉토리(/home/linuxbrew) 이외의 곳에서 발생하는 변경사항은 Instance가 삭제되면 사라집니다.


Job
------

Job은 GPU작업을 제출하는 최소단위입니다. 사용가능한 Machine Type을 지정하고 실행할 Command를 제출합니다.
Quota에 따라 동시에 제출가능한 작업의 갯수가 제한됩니다. Job은 공유되는 GPU 자원에서 FIFO로 실행됩니다.


--------
시작하기
--------

회원가입/로그인
----------------

Ocean의 Web Page로 접속하고 회원가입을 진행합니다.

이메일, 비밀번호를 제출하면 회원가입이 완료됩니다.

주의!
    비밀번호는 영어 대,소문자, 숫자, 특수문자가 하나이상 포함되어 있어야합니다.

로그인화면으로 돌아와 회원가입했던 이메일과 비밀번호로 로그인을 합니다.

Volume 생성하기
----------------

개인저장소인 Volume을 생성합니다.

Volume탭으로 이동후 생성하기 버튼을 클릭합니다.

Volume의 이름, 사용용량(Gi)을 입력하고 생성버튼을 클릭하면 생성이 완료됩니다.

QuotaRequest 보내기
--------------------

가장 처음에는 사용가능한 Quota가 없습니다. QuotaRequest로 사용할 MachineType에 대해 승인을 받아야합니다.

QuotaRequest탭으로 이동한후 요청하기 버튼을 클릭합니다.

사용하고자 하는 MachineType, 갯수, 사용기간, 이유를 적고 요청하기 버튼을 클릭하여 QuotaRequest를 보냅니다.

관리자의 승인이 떨어지면 해당 MachineType으로 Instance, Job이 생성가능합니다.

사용기간이 끝난 Quota는 자동으로 회수됩니다.

Instance 생성하기
------------------

승인된 MachineType으로 개인 원격 개발환경인 Instance를 생성해봅니다.

Instance탭으로 가서 생성하기 버튼을 클릭합니다.

Instance 이름, MachineType, 사용할 이미지, 생성 이유를 적으면 Instance 생성이 시작됩니다.

초기화 과정 이후 Instance가 생성되면 웹 편집기 링크를 통해 VS Code Web 편집기를 이용하거나, 표시된 SSH Port로 접속이 가능합니다.

정보
    VSCode의 기본 비밀번호는 가입 이메일입니다.
    /home/linuxbrew/.code/config.yaml 파일에서 비밀번호를 수정할 수 있습니다.

정보
    표시되는 SSH port를 클릭하면 SSH 접속 명령어가 복사됩니다.

Job 생성하기
-------------

GPU를 사용하기 위해서는 Job을 이용해야합니다. Job은 Instance와 완전히 같은 환경에서 실행됩니다.

Job 탭으로 이동하여 생성하기 버튼을 클릭합니다.

Job 이름, 이유, 이미지, 머신타입, 반복횟수, 실행할 명령어를 입력하고 제출 버튼을 클릭합니다.

Job이 제출되어 실행을 기다립니다. 

상태정보를 통해 Job이 대기중인지, 실행중인지, 완료 혹은 실패인지를 확인 할 수 있습니다.

상태정보 옆의 아이콘을 클릭하면 Job의 로그를 확인 할 수 있습니다.

정보
    Instance Command에서 ocean-cli을 이용하면 Job생성, log확인을 쉽고 빠르게 할 수 있습니다.
    ocean-cli의 자세한 내용은 ocean-cli문서를 참고하세요.
    