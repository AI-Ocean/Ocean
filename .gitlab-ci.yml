image: docker:stable
services:
  - docker:dind

variables:
  CURRENT_VER: v0.1.0a2

stages:
  - build
  - deploy

before_script:
  - echo $CI_REGISTRY_USER $CI_REGISTRY_PASSWOR $CI_REGISTRY
  - echo $CI_REGISTRY_IMAGE
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - docker pull $CI_REGISTRY_IMAGE:latest || true

docker test build:
  stage: build
  except:
    - master
    - develop
  script:
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:latest .

docker develop build:
  stage: build
  only:
    - develop
  script:
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:$CURRENT_VER .
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$CURRENT_VER

docker stable build:
  stage: build
  only:
    - master
  script:
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:$CURRENT_VER -t $CI_REGISTRY_IMAGE:stable.
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$CURRENT_VER
    - docker push $CI_REGISTRY_IMAGE:stable

deploy_functions:
  stage: deploy
  environment:
    name: production
  when: manual
  only:
  - master
  script: 
    - cd functions
    - npm install -g firebase-tools
    - npm install
    - firebase deploy -m "Pipeline $CI_PIPELINE_ID, build $CI_BUILD_ID" --non-interactive --token "$FIREBASE_TOKEN"
