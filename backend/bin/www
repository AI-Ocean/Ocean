#!/usr/bin/env node

/**
 * Module dependencies.
 */
var cluster = require('cluster');
var os = require('os');
var uuid = require('uuid');

// isntance id
var instance_id = uuid.v4();

/**
 * Create worker
 */
var cpuCount = os.cpus().length; //CPU 수
var workerCount = cpuCount/2;

// if master
if (cluster.isMaster) {
  console.log('Server ID : '+ instance_id);
  console.log('Number of CPU : ' + cpuCount);
  console.log('Number of Worker : ' + workerCount);
 
  // worker message listener
  var workerMsgListener = function(msg){
    var worker_id = msg.worker_id;
    // Request master id
    if (msg.cmd === 'MASTER_ID') {
        cluster.workers[worker_id].send({cmd:'MASTER_ID',master_id: instance_id});
    }
}

  // create worker
  for (var i = 0; i < workerCount; i++) {
      console.log("Create Worker [" + (i + 1) + "/" + workerCount + "]");
      var worker = cluster.fork();

      // worker message listener
      worker.on('message', workerMsgListener);
  }
 
  // when worker is online
  cluster.on('online', function(worker) {
      console.log('Worker Online - ID : [' + worker.process.pid + ']');
  });
 
  // when worker is dead, self-healing
  cluster.on('exit', function(worker) {
      console.log('Worker dead - ID : [' + worker.process.pid + ']');
      console.log('Create another worker');
     
      var worker = cluster.fork();
      // worker message listener
      worker.on('message', workerMsgListener);
  });

//워커일 경우
} else if(cluster.isWorker) {

  var app = require('../app');
  var debug = require('debug')('backend:server');
  var http = require('http');
  var worker_id = cluster.worker.id;

  /**
   * Get port from environment and store in Express.
   */
  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */
  server.listen(port, function () {
    console.log("Express Server is listen on " + server.address().port)
    console.log("Worker ID: " + worker_id)
  });

  server.on('error', onError);
  server.on('listening', onListening);

  // request master_id
  process.send({worker_id: worker_id, cmd:'MASTER_ID'});
  process.on('message', function (msg){
      if (msg.cmd === 'MASTER_ID') {
          master_id = msg.master_id;
      }
  });
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
